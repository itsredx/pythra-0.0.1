feat: Implement comprehensive package management system and enhanced PyThra CLI

Major Features Added:
- üéØ Enhanced Package Management System modeled after pub.dev
- üöÄ Fully integrated CLI with rich terminal output and validation
- üì¶ Plugin discovery and dependency resolution
- üîí Security validation and integrity checking
- üåê Mock registry system for future package distribution

Core Package System:
- Add package_system.py: Enhanced manifest schema with rich metadata
- Add package_manager.py: Centralized package discovery and loading
- Add package_registry.py: Remote registry client interface with caching
- Add package_security.py: Security validation and checksum verification
- Support for multiple package types (plugin, widgets, theme, utility, app)
- Semver-based dependency resolution with constraint handling

CLI Enhancements:
- Integrate package management into existing Typer-based CLI
- Add comprehensive package commands: list, info, search, validate, install, clean
- Rich terminal output with tables, colors, and progress indicators
- Multiple output formats: table, detailed, JSON
- Advanced filtering by type, local packages, and search queries
- Graceful fallbacks when optional dependencies are missing

Framework Integration:
- Refactor core.py: Replace legacy plugin system with PackageManager
- Update reconciler.py: Optimize reconciliation engine for package loading
- Enhance server.py: Better asset serving and JS module management
- Improve controllers.py: Enhanced widget registration and lifecycle
- Add plugins.py: Backward compatibility layer for legacy plugins

Sample Implementation:
- Create sample-text-editor plugin demonstrating new package format
- Complete package.json manifest with dependencies and metadata  
- Python module with plugin factory pattern
- JavaScript component with modern widget architecture
- CSS styling and asset organization

CLI Integration:
- Update pythra_cli/main.py: Add package command group with import fallbacks
- Add pythra_cli/package_commands.py: Full CLI implementation with rich output
- Update pythra_cli/__init__.py: Export main app for package integration
- Maintain backward compatibility with existing commands

Dependencies & Requirements:
- Update requirements.txt: Add semver, requests, typer, rich dependencies
- Organize dependencies by category with clear documentation
- Remove built-in modules from requirements list
- Version pinning for stability and compatibility

Documentation & Examples:
- Add sample plugin with complete package structure
- Comprehensive metadata schema demonstration
- Security validation examples with checksum verification
- CLI usage examples with various output formats

Testing & Validation:
- Package discovery working for new manifest format
- CLI commands fully functional with rich terminal output
- Security validation detecting checksum mismatches
- Filtering and search functionality operational
- JSON/table/detailed output formats working
- Backward compatibility maintained for existing functionality

Breaking Changes: None - Full backward compatibility maintained
Migration Path: Existing plugins continue to work, new format is optional

Co-authored-by: AI Assistant